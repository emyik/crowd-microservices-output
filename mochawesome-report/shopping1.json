{
  "stats": {
    "suites": 9,
    "tests": 39,
    "passes": 23,
    "pending": 0,
    "failures": 16,
    "start": "2023-07-24T15:48:44.578Z",
    "end": "2023-07-24T15:48:44.639Z",
    "duration": 61,
    "testsRegistered": 39,
    "passPercent": 58.97435897435898,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "de756251-5b2f-47fa-a528-a87bcd71f510",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "89d9a5d0-87a5-4941-8215-8c4f3a2f1529",
          "title": "test /BrowsItems",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/allShoppingTests.js",
          "file": "/tests/allShoppingTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Behavior 1",
              "fullTitle": "test /BrowsItems Behavior 1",
              "timedOut": false,
              "duration": 12,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/browseItems', {params: {userId: 'eaghayi', itemName: 'backpack'}});\nassert.equal(result.data[0].name, 'backpack');\nassert.notEqual(result.data[0].name, 'backpackSomething');",
              "err": {
                "message": "AssertionError: undefined == 'backpack'",
                "estack": "AssertionError [ERR_ASSERTION]: undefined == 'backpack'\n    at Context.<anonymous> (tests/allShoppingTests.js:9:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b68d47af-7551-4f40-9217-09cbb213acca",
              "parentUUID": "89d9a5d0-87a5-4941-8215-8c4f3a2f1529",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 2",
              "fullTitle": "test /BrowsItems Behavior 2",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/browseItems',{params:{ userId:'eaghayi', itemName:'backpackSOmething'}});\n// assert.equal(result.data.id, \"null\");\nassert.equal(result.data.length, 0);",
              "err": {
                "message": "AssertionError: 14 == 0",
                "estack": "AssertionError [ERR_ASSERTION]: 14 == 0\n    at Context.<anonymous> (tests/allShoppingTests.js:16:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 14\n+ 0\n"
              },
              "uuid": "bd958a5f-a1c1-4f29-ad39-ea9bce96d0e4",
              "parentUUID": "89d9a5d0-87a5-4941-8215-8c4f3a2f1529",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 3",
              "fullTitle": "test /BrowsItems Behavior 3",
              "timedOut": false,
              "duration": 10,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/browseItems',{params:{ userId:\"\", itemName:'backpack'}});\n// assert.equal(result.data.name, 'backpack');\nassert.equal(result.data[0].name, 'backpack');\nassert.notEqual(result.data[0].name, 'backpackSomething');\n// assert.notEqual(result.data.name, 'backpackSomething');",
              "err": {
                "message": "AssertionError: undefined == 'backpack'",
                "estack": "AssertionError [ERR_ASSERTION]: undefined == 'backpack'\n    at Context.<anonymous> (tests/allShoppingTests.js:24:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "e1966544-6457-4e37-8341-9e51e30c22d6",
              "parentUUID": "89d9a5d0-87a5-4941-8215-8c4f3a2f1529",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 4",
              "fullTitle": "test /BrowsItems Behavior 4",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/browseItems',{params:{ userId:'eaghayi', itemName:'backpack'}});\nassert.equal(1,1,'check the implementation, it is not implemented in the body of function ');",
              "err": {},
              "uuid": "0f6f6248-87df-4ea1-934d-ab10b01e4978",
              "parentUUID": "89d9a5d0-87a5-4941-8215-8c4f3a2f1529",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 5",
              "fullTitle": "test /BrowsItems Behavior 5",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/browseItems',{params:{ userId:'eaghayi', itemName:''}});\nassert.equal(result.data.id,'null','check the implementation, it is not implemented in the body of function ');",
              "err": {},
              "uuid": "5941e390-3f3e-40bf-aa36-64f0eefee4d0",
              "parentUUID": "89d9a5d0-87a5-4941-8215-8c4f3a2f1529",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0f6f6248-87df-4ea1-934d-ab10b01e4978",
            "5941e390-3f3e-40bf-aa36-64f0eefee4d0"
          ],
          "failures": [
            "b68d47af-7551-4f40-9217-09cbb213acca",
            "bd958a5f-a1c1-4f29-ad39-ea9bce96d0e4",
            "e1966544-6457-4e37-8341-9e51e30c22d6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a27a09b6-df7d-4ee0-be6b-57f77e29e672",
          "title": "test /fetchShoppingCart",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/allShoppingTests.js",
          "file": "/tests/allShoppingTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Behavior 1",
              "fullTitle": "test /fetchShoppingCart Behavior 1",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/fetchShoppingCart', {params: {userId: 'eaghayi'}});\nassert.equal(result.data.userId, 'eaghayi');\nassert.equal(result.data.itemList.length, 2);",
              "err": {
                "message": "AssertionError: undefined == 'eaghayi'",
                "estack": "AssertionError [ERR_ASSERTION]: undefined == 'eaghayi'\n    at Context.<anonymous> (tests/allShoppingTests.js:47:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "979f9ead-5777-4b1b-bef7-b24e00c9cc5c",
              "parentUUID": "a27a09b6-df7d-4ee0-be6b-57f77e29e672",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 2:",
              "fullTitle": "test /fetchShoppingCart Behavior 2:",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/fetchShoppingCart',{params:{ userId:'favazzad'}});// favazzad has two carts, so it should throw error\nassert.equal(result.data.id, \"null\");",
              "err": {
                "message": "AssertionError: undefined == 'null'",
                "estack": "AssertionError [ERR_ASSERTION]: undefined == 'null'\n    at Context.<anonymous> (tests/allShoppingTests.js:54:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "dbb37af8-f123-4ae9-b4b1-bf95377033c6",
              "parentUUID": "a27a09b6-df7d-4ee0-be6b-57f77e29e672",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 3: TODO: check the implementation, it is not implemented in the body of function",
              "fullTitle": "test /fetchShoppingCart Behavior 3: TODO: check the implementation, it is not implemented in the body of function",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/fetchShoppingCart',{params:{ userId:'eaghayi', itemName:'backpack'}});\nassert.equal(0,1,'check the implementation, it is not implemented in the body of function ');",
              "err": {
                "message": "AssertionError: check the implementation, it is not implemented in the body of function ",
                "estack": "AssertionError [ERR_ASSERTION]: check the implementation, it is not implemented in the body of function \n    at Context.<anonymous> (tests/allShoppingTests.js:60:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 0\n+ 1\n"
              },
              "uuid": "d19fdac9-faed-4364-ac99-83214cb2d6c4",
              "parentUUID": "a27a09b6-df7d-4ee0-be6b-57f77e29e672",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 4",
              "fullTitle": "test /fetchShoppingCart Behavior 4",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/fetchShoppingCart',{params:{ userId:''}});\nassert.equal(result.data.id,'null',);",
              "err": {},
              "uuid": "71dfaeb7-1830-4147-8864-84ea50b1da0d",
              "parentUUID": "a27a09b6-df7d-4ee0-be6b-57f77e29e672",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "71dfaeb7-1830-4147-8864-84ea50b1da0d"
          ],
          "failures": [
            "979f9ead-5777-4b1b-bef7-b24e00c9cc5c",
            "dbb37af8-f123-4ae9-b4b1-bf95377033c6",
            "d19fdac9-faed-4364-ac99-83214cb2d6c4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b05424c6-28da-4a36-a2cb-623a7573d4f0",
          "title": "test /Fetch Top Most Similar",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/allShoppingTests.js",
          "file": "/tests/allShoppingTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Behavior 1:  return best match results",
              "fullTitle": "test /Fetch Top Most Similar Behavior 1:  return best match results",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/fetchTopMostSimilarItems', {\n    params: {\n        userId: 'eaghayi',\n        itemName: 'backpack2'\n    }\n});\n// they didnot implemented this behavior at all\nassert.equal(result.data[0].name, 'backpack2');",
              "err": {},
              "uuid": "27faefeb-deba-4bf7-b148-2467c84b32ac",
              "parentUUID": "b05424c6-28da-4a36-a2cb-623a7573d4f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 2:  TODO: is not implemented. similar items are more than 20 items",
              "fullTitle": "test /Fetch Top Most Similar Behavior 2:  TODO: is not implemented. similar items are more than 20 items",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/fetchTopMostSimilarItems', {\n    params: {\n        userId: 'eaghayi',\n        itemName: 'backpack'\n    }\n});\n// they didnot implemented this behavior at all\nassert.equal(0, 1);",
              "err": {
                "message": "AssertionError: 0 == 1",
                "estack": "AssertionError [ERR_ASSERTION]: 0 == 1\n    at Context.<anonymous> (tests/allShoppingTests.js:91:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 0\n+ 1\n"
              },
              "uuid": "c544a4c7-3c2f-401f-9a1d-5d646dbf374f",
              "parentUUID": "b05424c6-28da-4a36-a2cb-623a7573d4f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 3: could not find any similar item it returns empty collection",
              "fullTitle": "test /Fetch Top Most Similar Behavior 3: could not find any similar item it returns empty collection",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/fetchTopMostSimilarItems', {\n    params: {\n        userId: 'eaghayi',\n        itemName: 'itemNotFound'\n    }\n});\nassert.equal(result.data.length, 0);",
              "err": {},
              "uuid": "7b68af58-fcf0-49f7-bec0-6b05dd865047",
              "parentUUID": "b05424c6-28da-4a36-a2cb-623a7573d4f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 4: store a 'log' data type object  from the items that the user searched",
              "fullTitle": "test /Fetch Top Most Similar Behavior 4: store a 'log' data type object  from the items that the user searched",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/fetchTopMostSimilarItems', {\n    params: {\n        userId: 'eaghayi',\n        itemName: 'backpack'\n    }\n});\nassert.equal(result.data[0].id, 1);",
              "err": {},
              "uuid": "75701bf2-9b86-4a98-8e2a-887357b5c5b0",
              "parentUUID": "b05424c6-28da-4a36-a2cb-623a7573d4f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 5: illegal argument, userId or itemName is null",
              "fullTitle": "test /Fetch Top Most Similar Behavior 5: illegal argument, userId or itemName is null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/fetchTopMostSimilarItems', {\n    params: {\n        userId: \"\",\n        itemName: 'backpack'\n    }\n});\nassert.equal(result.data[0].id, 'null', 'check userId');\nconst result2 = await axios.get('http://localhost:3001/fetchTopMostSimilarItems', {\n    params: {\n        userId: 'eaghayi',\n        itemName: \"\"\n    }\n});\nassert.equal(result2.data[0].id, 'null', 'check item name');",
              "err": {},
              "uuid": "0d8523c4-6123-4258-a642-3b48c86fdb5f",
              "parentUUID": "b05424c6-28da-4a36-a2cb-623a7573d4f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "27faefeb-deba-4bf7-b148-2467c84b32ac",
            "7b68af58-fcf0-49f7-bec0-6b05dd865047",
            "75701bf2-9b86-4a98-8e2a-887357b5c5b0",
            "0d8523c4-6123-4258-a642-3b48c86fdb5f"
          ],
          "failures": [
            "c544a4c7-3c2f-401f-9a1d-5d646dbf374f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0af9da86-bd0d-4544-ab88-5a4098de212f",
          "title": "test /placeOrder",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/allShoppingTests.js",
          "file": "/tests/allShoppingTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Behavior 1: TODO: check implementation",
              "fullTitle": "test /placeOrder Behavior 1: TODO: check implementation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(1,1, 'TODO: look at the implementation');",
              "err": {},
              "uuid": "35e40238-73c0-4bec-9e06-2df2acd5e544",
              "parentUUID": "0af9da86-bd0d-4544-ab88-5a4098de212f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 2:  TODO: check implementation",
              "fullTitle": "test /placeOrder Behavior 2:  TODO: check implementation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(1,1, 'TODO: look at the implementation');",
              "err": {},
              "uuid": "26e6a61a-8c03-45df-b405-e26077d68ae6",
              "parentUUID": "0af9da86-bd0d-4544-ab88-5a4098de212f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 3:  TODO: check implementation",
              "fullTitle": "test /placeOrder Behavior 3:  TODO: check implementation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(1,1, 'TODO: look at the implementation');",
              "err": {},
              "uuid": "e6577aa0-b009-4546-bfb1-10192b81752f",
              "parentUUID": "0af9da86-bd0d-4544-ab88-5a4098de212f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 4 TODO: check implementation",
              "fullTitle": "test /placeOrder Behavior 4 TODO: check implementation",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.equal(1,0, 'TODO: look at the implementation');",
              "err": {
                "message": "AssertionError: TODO: look at the implementation",
                "estack": "AssertionError [ERR_ASSERTION]: TODO: look at the implementation\n    at Context.<anonymous> (tests/allShoppingTests.js:149:16)\n    at process.processImmediate (node:internal/timers:476:21)",
                "diff": "- 1\n+ 0\n"
              },
              "uuid": "322a118d-e9af-4d39-b27d-911fd76c0758",
              "parentUUID": "0af9da86-bd0d-4544-ab88-5a4098de212f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 5:",
              "fullTitle": "test /placeOrder Behavior 5:",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = await axios.post('http://localhost:3001/placeOrder', {params: {userId:'', address:\"fairfax,va,usa\", paymentCardNumber:'1234567890123456', cvv2:'123', zipCode:'22030'}});\nassert.equal(obj.data.result, null);\nassert.notEqual(obj.data.result, true);",
              "err": {},
              "uuid": "0b6cda45-40e1-4b25-819a-031b94510683",
              "parentUUID": "0af9da86-bd0d-4544-ab88-5a4098de212f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 6: TODO: check implementation",
              "fullTitle": "test /placeOrder Behavior 6: TODO: check implementation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(1,1, 'is not implemented');",
              "err": {},
              "uuid": "8474454d-59a7-4a55-9525-1f0d44b885e0",
              "parentUUID": "0af9da86-bd0d-4544-ab88-5a4098de212f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "35e40238-73c0-4bec-9e06-2df2acd5e544",
            "26e6a61a-8c03-45df-b405-e26077d68ae6",
            "e6577aa0-b009-4546-bfb1-10192b81752f",
            "0b6cda45-40e1-4b25-819a-031b94510683",
            "8474454d-59a7-4a55-9525-1f0d44b885e0"
          ],
          "failures": [
            "322a118d-e9af-4d39-b27d-911fd76c0758"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9a4488c1-3249-43fe-b4b8-a0fb70bce446",
          "title": "test /purchase histories",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/allShoppingTests.js",
          "file": "/tests/allShoppingTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Behavior 1:  refines and returns items that the user purchased",
              "fullTitle": "test /purchase histories Behavior 1:  refines and returns items that the user purchased",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/purchasesHistories', {\n    params: {\n        userId: 'eaghayi'\n    }\n});\n// they didnot implemented this behavior at all\nassert.equal(result.data[0].action, \"purchased\");\nassert.equal(result.data[0].id, 1);",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'action')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'action')\n    at Context.<anonymous> (tests/allShoppingTests.js:175:37)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "23ac597f-55a5-4560-a1ba-5c94e3550bc7",
              "parentUUID": "9a4488c1-3249-43fe-b4b8-a0fb70bce446",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 2:  function returns an empty collection",
              "fullTitle": "test /purchase histories Behavior 2:  function returns an empty collection",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/purchasesHistories', {\n    params: {\n        userId: 'noOne'\n    }\n});\n// they didnot implemented this behavior at all\nassert.equal(result.data.length, 0);",
              "err": {},
              "uuid": "c7382e6e-e83f-4fca-ba08-e858c8139459",
              "parentUUID": "9a4488c1-3249-43fe-b4b8-a0fb70bce446",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 3: userId should not be null or empty",
              "fullTitle": "test /purchase histories Behavior 3: userId should not be null or empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/purchasesHistories', {\n    params: {\n        userId: ''\n    }\n});\nassert.equal(result.data[0].id, \"null\");",
              "err": {},
              "uuid": "5d59d722-be88-4639-9702-af12df6b3855",
              "parentUUID": "9a4488c1-3249-43fe-b4b8-a0fb70bce446",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c7382e6e-e83f-4fca-ba08-e858c8139459",
            "5d59d722-be88-4639-9702-af12df6b3855"
          ],
          "failures": [
            "23ac597f-55a5-4560-a1ba-5c94e3550bc7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2b111656-a34f-449f-a185-0ad93be5bfff",
          "title": "test /recently Viewed Items",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/allShoppingTests.js",
          "file": "/tests/allShoppingTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Behavior 1:  refines and returns items that the user viewed",
              "fullTitle": "test /recently Viewed Items Behavior 1:  refines and returns items that the user viewed",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/recentlyViewedItems', {\n    params: {\n        userId: 'eaghayi'\n    }\n});\n// they didnot implemented this behavior at all\nassert(result.data.length>0);\nassert(result.data[0].action ==\"viewed\" || result.data[0].action ==\"purchased\" );\nassert.equal(result.data[0].id, 1);",
              "err": {
                "message": "AssertionError: 2 == 1",
                "estack": "AssertionError [ERR_ASSERTION]: 2 == 1\n    at Context.<anonymous> (tests/allShoppingTests.js:211:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 2\n+ 1\n"
              },
              "uuid": "2bd6373e-6957-43f2-8fa5-fde9db3985c3",
              "parentUUID": "2b111656-a34f-449f-a185-0ad93be5bfff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 2:  function returns an empty collection",
              "fullTitle": "test /recently Viewed Items Behavior 2:  function returns an empty collection",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/recentlyViewedItems', {\n    params: {\n        userId: 'noOne'\n    }\n});\n// they didnot implemented this behavior at all\nassert.equal(result.data.length, 0);",
              "err": {},
              "uuid": "87f36f4c-97e2-45eb-b2e5-72c53fc405f8",
              "parentUUID": "2b111656-a34f-449f-a185-0ad93be5bfff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 3: userId should not be null or empty",
              "fullTitle": "test /recently Viewed Items Behavior 3: userId should not be null or empty",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/recentlyViewedItems', {\n    params: {\n        userId: ''\n    }\n});\nassert.equal(result.data[0].id, \"null\");",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'id')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'id')\n    at Context.<anonymous> (tests/allShoppingTests.js:228:37)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "7c432101-2594-4763-8afe-fe90f2b45ded",
              "parentUUID": "2b111656-a34f-449f-a185-0ad93be5bfff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87f36f4c-97e2-45eb-b2e5-72c53fc405f8"
          ],
          "failures": [
            "2bd6373e-6957-43f2-8fa5-fde9db3985c3",
            "7c432101-2594-4763-8afe-fe90f2b45ded"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0aa55352-4b0d-4183-bd03-035e65301b45",
          "title": "test /reviewAnItem",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/allShoppingTests.js",
          "file": "/tests/allShoppingTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Behavior 1:",
              "fullTitle": "test /reviewAnItem Behavior 1:",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "1\n        const obj1 = await axios.post('http://localhost:3001/reviewAnItem', {params: {userId:'eaghayi', itemId:'1', comment:'recomend it', rate:'3'}});\n        assert.equal(obj1.data.result.comment, 'recomend it');",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'comment')",
                "estack": "TypeError: Cannot read properties of null (reading 'comment')\n    at Context.<anonymous> (tests/allShoppingTests.js:238:39)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "68cf0a4f-8c73-4311-b384-cf56c8338684",
              "parentUUID": "0aa55352-4b0d-4183-bd03-035e65301b45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 2",
              "fullTitle": "test /reviewAnItem Behavior 2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj1 = await axios.post('http://localhost:3001/reviewAnItem', {params: {userId:null, itemId:'', comment:'', rate:''}});\nassert.equal(obj1.data.result, null);\nassert.notEqual(obj1.data.result, true);\nconst obj = await axios.post('http://localhost:3001/reviewAnItem', {params: {userId:'eaghayi', itemId:'1', comment:'not bad', rate:null}});\nassert.equal(obj.data.result, null);\nassert.notEqual(obj.data.result, true);",
              "err": {},
              "uuid": "ac53a478-0886-4cb0-917a-b7e43a081e46",
              "parentUUID": "0aa55352-4b0d-4183-bd03-035e65301b45",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ac53a478-0886-4cb0-917a-b7e43a081e46"
          ],
          "failures": [
            "68cf0a4f-8c73-4311-b384-cf56c8338684"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a3499682-2800-43bb-b76f-792917b80f11",
          "title": "test /searchItems",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/allShoppingTests.js",
          "file": "/tests/allShoppingTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Behavior 1:  return best match results base on category",
              "fullTitle": "test /searchItems Behavior 1:  return best match results base on category",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/searchItems?criteria=school');\nassert.equal(result.data.length,1);",
              "err": {},
              "uuid": "fb41f173-11b4-44b3-b4f3-a27bf98f960d",
              "parentUUID": "a3499682-2800-43bb-b76f-792917b80f11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 2:  return best match results base on item name",
              "fullTitle": "test /searchItems Behavior 2:  return best match results base on item name",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/searchItems',{params:{ userId:'eaghayi', criteria:'backpack'}});\n// they called fetchTopMostSimilar methods, so implicitly this behavior is implemented if fetchTopMostSimilar be correct.\nassert.equal(1, 1);",
              "err": {},
              "uuid": "ce545777-2138-4f77-81b5-944f995908c7",
              "parentUUID": "a3499682-2800-43bb-b76f-792917b80f11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 2:  return best match results",
              "fullTitle": "test /searchItems Behavior 2:  return best match results",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/searchItems',{params:{ userId:'eaghayi', criteria:'backpack'}});\n    // they called fetchTopMostSimilar methods, so implicitly this behavior is implemented if fetchTopMostSimilar be correct.\nassert.equal(1, 1);",
              "err": {},
              "uuid": "f25a52cc-9b0a-4a36-a5a7-77a6121ec3a0",
              "parentUUID": "a3499682-2800-43bb-b76f-792917b80f11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 3: TODO: check implementation",
              "fullTitle": "test /searchItems Behavior 3: TODO: check implementation",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/searchItems',{params:{ userId:'eaghayi', criteria:'backpack'}});\nassert.equal(1, 1);",
              "err": {},
              "uuid": "0df98e2e-f127-42e1-9458-98079dda5da7",
              "parentUUID": "a3499682-2800-43bb-b76f-792917b80f11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 4: illegal argument, criteria is null",
              "fullTitle": "test /searchItems Behavior 4: illegal argument, criteria is null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/searchItems?criteria=');\nassert.equal(result.data[0].id, 'null');",
              "err": {},
              "uuid": "319f83c6-f740-44dd-a993-548c3de3dc2d",
              "parentUUID": "a3499682-2800-43bb-b76f-792917b80f11",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb41f173-11b4-44b3-b4f3-a27bf98f960d",
            "ce545777-2138-4f77-81b5-944f995908c7",
            "f25a52cc-9b0a-4a36-a5a7-77a6121ec3a0",
            "0df98e2e-f127-42e1-9458-98079dda5da7",
            "319f83c6-f740-44dd-a993-548c3de3dc2d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "edaacffb-c889-41f3-89b6-88a9351918a7",
          "title": "test /updateShoppingCart",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/allShoppingTests.js",
          "file": "/tests/allShoppingTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Behavior 1: TODO: check implementation",
              "fullTitle": "test /updateShoppingCart Behavior 1: TODO: check implementation",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const obj1 = await axios.post('http://localhost:3001/updateShoppingCart', {params: {userId:'eaghayi', itemId:'1', flagOfAction:'removing'}});\n// assert.equal(obj1.data.result, true);\nassert.equal(1,0,'TODO: check implementation');",
              "err": {
                "message": "AssertionError: TODO: check implementation",
                "estack": "AssertionError [ERR_ASSERTION]: TODO: check implementation\n    at Context.<anonymous> (tests/allShoppingTests.js:292:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 1\n+ 0\n"
              },
              "uuid": "0611db40-cdf4-4ad1-84f1-4b145e474175",
              "parentUUID": "edaacffb-c889-41f3-89b6-88a9351918a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 2",
              "fullTitle": "test /updateShoppingCart Behavior 2",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const obj1 = await axios.post('http://localhost:3001/updateShoppingCart', {params: {userId:'eaghayi', itemId:'1', flagOfAction:'adding'}});\nassert.equal(obj1.data.result, true);",
              "err": {
                "message": "AssertionError: null == true",
                "estack": "AssertionError [ERR_ASSERTION]: null == true\n    at Context.<anonymous> (tests/allShoppingTests.js:298:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "1041234b-07c6-4c0f-ae6f-18e7e267eeea",
              "parentUUID": "edaacffb-c889-41f3-89b6-88a9351918a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 3",
              "fullTitle": "test /updateShoppingCart Behavior 3",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const obj1 = await axios.post('http://localhost:3001/updateShoppingCart', {params: {userId:'eaghayi', itemId:'1', flagOfAction:'removing'}});\nassert.equal(obj1.data.result, true);",
              "err": {
                "message": "AssertionError: null == true",
                "estack": "AssertionError [ERR_ASSERTION]: null == true\n    at Context.<anonymous> (tests/allShoppingTests.js:303:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "7d12567a-ce14-43ba-b52f-a0902917e2d5",
              "parentUUID": "edaacffb-c889-41f3-89b6-88a9351918a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 4",
              "fullTitle": "test /updateShoppingCart Behavior 4",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj1 = await axios.post('http://localhost:3001/updateShoppingCart', {params: {userId:'eaghayi', itemId:'1', flagOfAction:'SOMETHING'}});\nassert.notEqual(obj1.data.result, true);\nassert.equal(obj1.data.result, null);",
              "err": {},
              "uuid": "d5ec1bbb-5324-480a-ac61-c3f91ec4f398",
              "parentUUID": "edaacffb-c889-41f3-89b6-88a9351918a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 5: TODO: check implementation",
              "fullTitle": "test /updateShoppingCart Behavior 5: TODO: check implementation",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const obj1 = await axios.post('http://localhost:3001/updateShoppingCart', {params: {userId:'eaghayi', itemId:'1', flagOfAction:'removing'}});\nassert.equal(obj1.data.result, true);\nassert.equal(1,2,'TODO: check implementation');",
              "err": {
                "message": "AssertionError: null == true",
                "estack": "AssertionError [ERR_ASSERTION]: null == true\n    at Context.<anonymous> (tests/allShoppingTests.js:315:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "465fa9c2-d308-49dc-882e-a475ae36dba0",
              "parentUUID": "edaacffb-c889-41f3-89b6-88a9351918a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Behavior 6",
              "fullTitle": "test /updateShoppingCart Behavior 6",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = await axios.post('http://localhost:3001/updateShoppingCart', {params: {userId:'eaghayi', itemId:'', flagOfAction:'removing'}});\n        assert.equal(obj.data.result, null);\n        assert.notEqual(obj.data.result, true);",
              "err": {},
              "uuid": "530a063e-41cd-4032-8a74-b8f6112b3e42",
              "parentUUID": "edaacffb-c889-41f3-89b6-88a9351918a7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d5ec1bbb-5324-480a-ac61-c3f91ec4f398",
            "530a063e-41cd-4032-8a74-b8f6112b3e42"
          ],
          "failures": [
            "0611db40-cdf4-4ad1-84f1-4b145e474175",
            "1041234b-07c6-4c0f-ae6f-18e7e267eeea",
            "7d12567a-ce14-43ba-b52f-a0902917e2d5",
            "465fa9c2-d308-49dc-882e-a475ae36dba0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}