{
  "stats": {
    "suites": 12,
    "tests": 34,
    "passes": 24,
    "pending": 0,
    "failures": 10,
    "start": "2023-07-24T15:03:00.940Z",
    "end": "2023-07-24T15:03:00.998Z",
    "duration": 58,
    "testsRegistered": 34,
    "passPercent": 70.58823529411765,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "279ee01e-301c-4db4-a1ae-9bf3792ede11",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fd4444c3-201d-48a8-a1ca-aee3d1d025ad",
          "title": "test /addTodo",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/alltodoTests.js",
          "file": "/tests/alltodoTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "illegal argument",
              "fullTitle": "test /addTodo illegal argument",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await\naxios.get('http://localhost:3001/addTodo', {params: {id: ''}});\nassert.equal(result.data.id, 'null');\nconst result2 = await\naxios.get('http://localhost:3001/addTodo', {params: {id: '', title: ''}});\nassert.equal(result2.data.title, 'null');\nconst result3 = await\naxios.get('http://localhost:3001/addTodo', {params: {id: '', title: '', userId: ''}});\nassert.equal(result3.data.userId, 'null');",
              "err": {},
              "uuid": "5c71a902-2896-48b2-8bbf-e2b944bb73e5",
              "parentUUID": "fd4444c3-201d-48a8-a1ca-aee3d1d025ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "save todo",
              "fullTitle": "test /addTodo save todo",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await  axios.get('http://localhost:3001/addTodo',\n    {\n        params: {\n            id: '2',\n            title: 'testAddTodo',\n            userId: 'eaghayi',\n            status: 2,\n            groupId: 'school',\n            createdTime: '12:39',\n            createdDate: '06/13/2018',\n            priority: 1,\n            address: ' ',\n            repeat: ' '\n        }\n    });\nassert.equal(result.data.id, 2);",
              "err": {
                "message": "AssertionError: 'null' == 2",
                "estack": "AssertionError [ERR_ASSERTION]: 'null' == 2\n    at Context.<anonymous> (tests/alltodoTests.js:44:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "ce1f20bc-fe85-4c64-8a4a-459df676eb28",
              "parentUUID": "fd4444c3-201d-48a8-a1ca-aee3d1d025ad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5c71a902-2896-48b2-8bbf-e2b944bb73e5"
          ],
          "failures": [
            "ce1f20bc-fe85-4c64-8a4a-459df676eb28"
          ],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "60bebf31-2f8d-4d4a-aada-fb3bf9f04a96",
          "title": "test /createGroup",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/alltodoTests.js",
          "file": "/tests/alltodoTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "illegal argument",
              "fullTitle": "test /createGroup illegal argument",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/createGroup?todoArray=');\nassert.equal(result.data[0].id,'null');\nconst result2 = await axios.get('http://localhost:3001/createGroup?groupId=');\nassert.equal(result2.data[0].id,'null');",
              "err": {},
              "uuid": "4031d072-270b-4a96-ba32-b295731f9106",
              "parentUUID": "60bebf31-2f8d-4d4a-aada-fb3bf9f04a96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "sets a label (groupId) for an array of todos",
              "fullTitle": "test /createGroup sets a label (groupId) for an array of todos",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// const arryOfTodo= [{\n        //     id: '209',\n        //     title: 'testAddTodo',\n        //     userId: 'eaghayi',\n        //     dueDate:'09-23-2018',\n        //     status: 2,\n        //     groupId: 'school3',\n        //     createdTime: '12:39',\n        //     createdDate: '06-13-2018',\n        //     priority: 1,\n        //     address: ' ',\n        //     repeat: ' '\n        // },{\n        //     id: '300',\n        //     title: 'testAddTodo',\n        //     userId: 'eaghayi',\n        //     dueDate:'09-23-2018',\n        //     status: 2,\n        //     groupId: 'school2',\n        //     createdTime: '12:39',\n        //     createdDate: '06-13-2018',\n        //     priority: 1,\n        //     address: ' ',\n        //     repeat: ' '\n        // }];\n        const arryOfTodo =   { \"todoArray\": [\n                {\n                    \"title\": \"coding\",\n                    \"description\": \"work on the crowd cod\",\n                    \"dueDate\": \"03-14-2020\",\n                    \"dataStoreId\": \"todo3\",\n                    \"userId\": \"emad.aghayi\",\n                    \"id\": 234,\n                    \"status\": 1,\n                    \"groupId\": \"schoolworks\",\n                    \"createdTime\": \"13:51\",\n                    \"createdDate\": \"05/21/2018\",\n                    \"priority\": 3,\n                    \"address\": \"Fairfax,VA,US 22032\",\n                    \"repeat\": \"1\"\n                }\n            ]\n        };\n        const result2 = await axios.get('http://localhost:3001/createGroup', {params:{ todoArray:arryOfTodo, groupId:'home'}});\n        // const result = await axios.get('http://localhost:3001/getAllTodoOfaGroup?userId=eaghayi');\n        assert.equal(result2.data,true); // since all todos are  in DB, it should return true",
              "err": {
                "message": "AssertionError: [\n  {\n    address: 'null',\n    createdDate: 'null',\n    createdTime: 'null',\n    dataStoreId: 'null',\n    description: 'null',\n    dueDate: 'null',\n    groupId: 'null',\n    id: 'null',\n    priority: 'null',\n    repeat: 'null',\n    status: 'null',\n    title: 'null',\n    userId: 'null'\n  }\n] == true",
                "estack": "AssertionError [ERR_ASSERTION]: [\n  {\n    address: 'null',\n    createdDate: 'null',\n    createdTime: 'null',\n    dataStoreId: 'null',\n    description: 'null',\n    dueDate: 'null',\n    groupId: 'null',\n    id: 'null',\n    priority: 'null',\n    repeat: 'null',\n    status: 'null',\n    title: 'null',\n    userId: 'null'\n  }\n] == true\n    at Context.<anonymous> (tests/alltodoTests.js:114:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "f62f4e68-f8f7-40e1-a116-3f47d0b41258",
              "parentUUID": "60bebf31-2f8d-4d4a-aada-fb3bf9f04a96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it returns false if it can not find the all todos items for creating the group",
              "fullTitle": "test /createGroup it returns false if it can not find the all todos items for creating the group",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const arryOfTodo2 =   { \"todoArray\": [\n        {\n            \"title\": \"coding\",\n            \"description\": \"work on the crowd cod\",\n            \"dueDate\": \"03-14-2020\",\n            \"dataStoreId\": \"todo3\",\n            \"userId\": \"emad.aghayi\",\n            \"id\": 234,\n            \"status\": 1,\n            \"groupId\": \"schoolworks\",\n            \"createdTime\": \"13:51\",\n            \"createdDate\": \"05/21/2018\",\n            \"priority\": 3,\n            \"address\": \"Fairfax,VA,US 22032\",\n            \"repeat\": \"1\"\n        },\n        {\n            \"title\": \"coding\",\n            \"description\": \"work on the crowd cod\",\n            \"dueDate\": \"03-14-2018\",\n            \"dataStoreId\": \"todo3\",\n            \"userId\": \"emad.aghayi\",\n            \"id\": 2,\n            \"status\": 3,\n            \"groupId\": \"schoolworks\",\n            \"createdTime\": \"13:51\",\n            \"createdDate\": \"05/21/2018\",\n            \"priority\": 2,\n            \"address\": \"Fairfax,VA,US 22032\",\n            \"repeat\": \"2\"\n        },\n        {\n            \"title\": \"coding\",\n            \"description\": \"work on the crowd cod\",\n            \"dueDate\": \"03-14-2019\",\n            \"dataStoreId\": \"todo3\",\n            \"userId\": \"emad.aghayi\",\n            \"id\": 3,\n            \"status\": 2,\n            \"groupId\": \"Homework\",\n            \"createdTime\": \"13:51\",\n            \"createdDate\": \"05/21/2018\",\n            \"priority\": 1,\n            \"address\": \"Fairfax,VA,US 22032\",\n            \"repeat\": \"3\"\n        }\n    ]\n};\nconst result = await axios.get('http://localhost:3001/createGroup', {params:{ todoArray:arryOfTodo2, groupId:'school'}});\n// const result = await axios.get('http://localhost:3001/getAllTodoOfaGroup?userId=eaghayi');\nassert.equal(result.data,false); // since all todos are not in DB, it should return flase",
              "err": {
                "message": "AssertionError: [\n  {\n    address: 'null',\n    createdDate: 'null',\n    createdTime: 'null',\n    dataStoreId: 'null',\n    description: 'null',\n    dueDate: 'null',\n    groupId: 'null',\n    id: 'null',\n    priority: 'null',\n    repeat: 'null',\n    status: 'null',\n    title: 'null',\n    userId: 'null'\n  }\n] == false",
                "estack": "AssertionError [ERR_ASSERTION]: [\n  {\n    address: 'null',\n    createdDate: 'null',\n    createdTime: 'null',\n    dataStoreId: 'null',\n    description: 'null',\n    dueDate: 'null',\n    groupId: 'null',\n    id: 'null',\n    priority: 'null',\n    repeat: 'null',\n    status: 'null',\n    title: 'null',\n    userId: 'null'\n  }\n] == false\n    at Context.<anonymous> (tests/alltodoTests.js:171:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "f27c9442-3856-4164-9981-22d0b4cc7cb4",
              "parentUUID": "60bebf31-2f8d-4d4a-aada-fb3bf9f04a96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "the groupId already existed in the other todos",
              "fullTitle": "test /createGroup the groupId already existed in the other todos",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const arryOfTodo =   { \"todoArray\": [\n                {\n                    \"title\": \"coding\",\n                    \"description\": \"work on the crowd cod\",\n                    \"dueDate\": \"03-14-2020\",\n                    \"dataStoreId\": \"todo3\",\n                    \"userId\": \"emad.aghayi\",\n                    \"id\": 234,\n                    \"status\": 1,\n                    \"groupId\": \"school\",\n                    \"createdTime\": \"13:51\",\n                    \"createdDate\": \"05/21/2018\",\n                    \"priority\": 3,\n                    \"address\": \"Fairfax,VA,US 22032\",\n                    \"repeat\": \"1\"\n                }\n            ]\n        };\n        const result = await axios.get('http://localhost:3001/createGroup', {params:{ todoArray:arryOfTodo, groupId:'school'}});\n        // const result = await axios.get('http://localhost:3001/getAllTodoOfaGroup?userId=eaghayi');\n        assert.equal(result.data,false);",
              "err": {
                "message": "AssertionError: [\n  {\n    address: 'null',\n    createdDate: 'null',\n    createdTime: 'null',\n    dataStoreId: 'null',\n    description: 'null',\n    dueDate: 'null',\n    groupId: 'null',\n    id: 'null',\n    priority: 'null',\n    repeat: 'null',\n    status: 'null',\n    title: 'null',\n    userId: 'null'\n  }\n] == false",
                "estack": "AssertionError [ERR_ASSERTION]: [\n  {\n    address: 'null',\n    createdDate: 'null',\n    createdTime: 'null',\n    dataStoreId: 'null',\n    description: 'null',\n    dueDate: 'null',\n    groupId: 'null',\n    id: 'null',\n    priority: 'null',\n    repeat: 'null',\n    status: 'null',\n    title: 'null',\n    userId: 'null'\n  }\n] == false\n    at Context.<anonymous> (tests/alltodoTests.js:201:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "992987d9-c523-4678-9967-458d876df23c",
              "parentUUID": "60bebf31-2f8d-4d4a-aada-fb3bf9f04a96",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4031d072-270b-4a96-ba32-b295731f9106"
          ],
          "failures": [
            "f62f4e68-f8f7-40e1-a116-3f47d0b41258",
            "f27c9442-3856-4164-9981-22d0b4cc7cb4",
            "992987d9-c523-4678-9967-458d876df23c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "26ccd931-2eac-4327-88eb-896fff5c261f",
          "title": "test /deleteTodo",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/alltodoTests.js",
          "file": "/tests/alltodoTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "illegal argument",
              "fullTitle": "test /deleteTodo illegal argument",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await\naxios.get('http://localhost:3001/deleteTodo', {params: {id: ''}});\nassert.equal(result.data.id, 'null');\nconst result2 = await\naxios.get('http://localhost:3001/deleteTodo', {params: {id: '', title: ''}});\nassert.equal(result2.data.title, 'null');\nconst result3 = await\naxios.get('http://localhost:3001/deleteTodo', {params: {id: '', title: '', userId: ''}});\nassert.equal(result3.data.userId, 'null');",
              "err": {},
              "uuid": "63ecaa0c-6473-4881-998d-f5db9da2e3e1",
              "parentUUID": "26ccd931-2eac-4327-88eb-896fff5c261f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete todo",
              "fullTitle": "test /deleteTodo delete todo",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await  axios.get('http://localhost:3001/deleteTodo',\n    {\n        params: {\n            id: '2',\n            title: 'testAddTodo',\n            userId: 'eaghayi',\n            dueDate:'09-23-2018',\n            status: 2,\n            groupId: 'school',\n            createdTime: '12:39',\n            createdDate: '06-13-2018',\n            priority: 1,\n            address: ' ',\n            repeat: ' '\n        }\n    });\nassert.equal(result.data.id, 2);",
              "err": {},
              "uuid": "fc7d396a-f1ed-4260-a43b-73b6cd09a222",
              "parentUUID": "26ccd931-2eac-4327-88eb-896fff5c261f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "63ecaa0c-6473-4881-998d-f5db9da2e3e1",
            "fc7d396a-f1ed-4260-a43b-73b6cd09a222"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "22350082-f872-4653-bbd2-9b1d13400fe7",
          "title": "test /fetchAllTodos",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/alltodoTests.js",
          "file": "/tests/alltodoTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "illegal argument",
              "fullTitle": "test /fetchAllTodos illegal argument",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/fetchAllTodos?userId=');\nassert.equal(result.data[0].id,'null');",
              "err": {},
              "uuid": "c6887cb4-da5c-45eb-9013-9c41b62e5f7e",
              "parentUUID": "22350082-f872-4653-bbd2-9b1d13400fe7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fetch all todo",
              "fullTitle": "test /fetchAllTodos fetch all todo",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/fetchAllTodos?userId=eaghayi');\nassert.equal(result.data[0].id,'1');\nassert.equal(result.data[1].id,'2');\nassert.equal(result.data[0].description,'be sure to commit unit tests');\nassert.equal(result.data[1].description,'be sure to push unit tests');\nassert.equal(result.data[0].title,'commit code');\nassert.equal(result.data[1].title,'push code');\nassert.equal(result.data[0].dueDate,'02/25/2018');",
              "err": {},
              "uuid": "044c1c46-9070-4755-abf0-c383ac006f4e",
              "parentUUID": "22350082-f872-4653-bbd2-9b1d13400fe7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it returns empty array if it can not find any thing",
              "fullTitle": "test /fetchAllTodos it returns empty array if it can not find any thing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/fetchAllTodos?userId=tlatoza');\nassert.equal(result.data,'');",
              "err": {},
              "uuid": "85137b12-6652-47c1-a54f-8b9e57ec62b4",
              "parentUUID": "22350082-f872-4653-bbd2-9b1d13400fe7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c6887cb4-da5c-45eb-9013-9c41b62e5f7e",
            "044c1c46-9070-4755-abf0-c383ac006f4e",
            "85137b12-6652-47c1-a54f-8b9e57ec62b4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "24aa4af3-91bb-40bd-b014-9413eb90b877",
          "title": "test /fetchTodosBasedOnStatus",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/alltodoTests.js",
          "file": "/tests/alltodoTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "illegal argument",
              "fullTitle": "test /fetchTodosBasedOnStatus illegal argument",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/fetchTodosBasedOnStatus?userId=');\nassert.equal(result.data[0].id,'null');\nconst result2 = await axios.get('http://localhost:3001/fetchTodosBasedOnStatus?status=');\nassert.equal(result2.data[0].id,'null');",
              "err": {},
              "uuid": "197a27de-1567-41b6-b00b-0e784db1d679",
              "parentUUID": "24aa4af3-91bb-40bd-b014-9413eb90b877",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fetch all todo of a specific status",
              "fullTitle": "test /fetchTodosBasedOnStatus fetch all todo of a specific status",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/fetchTodosBasedOnStatus', {params:{ userId:'eaghayi', status:'1'}});\n      // console.log(result.data);\nassert.equal(result.data[0].id,'1');\nassert.equal(result.data.length,1);\nassert.equal(result.data[0].status,1);",
              "err": {},
              "uuid": "38f7edcb-e998-4f36-90d3-285f4e615a6c",
              "parentUUID": "24aa4af3-91bb-40bd-b014-9413eb90b877",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it returns empty array if it can not find any thing",
              "fullTitle": "test /fetchTodosBasedOnStatus it returns empty array if it can not find any thing",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/fetchTodosBasedOnStatus', {params:{ userId:'eaghayi', status:'4'}});\nassert.equal(result.data,'');",
              "err": {
                "message": "AssertionError: [\n  {\n    address: 'null',\n    createdDate: 'null',\n    createdTime: 'null',\n    dataStoreId: 'null',\n    description: 'null',\n    dueDate: 'null',\n    groupId: 'null',\n    id: 'null',\n    priority: 'null',\n    repeat: 'null',\n    status: 'null',\n    title: 'null',\n    userId: 'null'\n  }\n] == ''",
                "estack": "AssertionError [ERR_ASSERTION]: [\n  {\n    address: 'null',\n    createdDate: 'null',\n    createdTime: 'null',\n    dataStoreId: 'null',\n    description: 'null',\n    dueDate: 'null',\n    groupId: 'null',\n    id: 'null',\n    priority: 'null',\n    repeat: 'null',\n    status: 'null',\n    title: 'null',\n    userId: 'null'\n  }\n] == ''\n    at Context.<anonymous> (tests/alltodoTests.js:319:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "38a915c0-6f98-4b04-b0d2-38d62bc54aa6",
              "parentUUID": "24aa4af3-91bb-40bd-b014-9413eb90b877",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "197a27de-1567-41b6-b00b-0e784db1d679",
            "38f7edcb-e998-4f36-90d3-285f4e615a6c"
          ],
          "failures": [
            "38a915c0-6f98-4b04-b0d2-38d62bc54aa6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "17b53a8c-1839-4b96-9e31-bf2af298a15e",
          "title": "test /fetchTodo",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/alltodoTests.js",
          "file": "/tests/alltodoTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "illegal argument",
              "fullTitle": "test /fetchTodo illegal argument",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/fetchTodo?id=');\nassert.equal(result.data.id,'null');",
              "err": {},
              "uuid": "8fb69a5a-fbbd-4f12-8f76-f9b6932741da",
              "parentUUID": "17b53a8c-1839-4b96-9e31-bf2af298a15e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fetch a todo",
              "fullTitle": "test /fetchTodo fetch a todo",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/fetchTodo?id=234');\nassert.equal(result.data.id,'234');\nassert.equal(result.data.description,'be sure to commit unit tests');\nassert.equal(result.data.title,'commit code');\nassert.equal(result.data.dueDate,'02-25-2018');",
              "err": {},
              "uuid": "bdd64e96-fde1-47e4-ab11-b7a0e4d00fe9",
              "parentUUID": "17b53a8c-1839-4b96-9e31-bf2af298a15e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8fb69a5a-fbbd-4f12-8f76-f9b6932741da",
            "bdd64e96-fde1-47e4-ab11-b7a0e4d00fe9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "90d7a6e8-dcb4-4b47-a8ce-5fa91f035f5a",
          "title": "test /getAllTodoOfaGroup",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/alltodoTests.js",
          "file": "/tests/alltodoTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "illegal argument",
              "fullTitle": "test /getAllTodoOfaGroup illegal argument",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/getAllTodoOfaGroup?userId=');\nassert.equal(result.data[0].id,'null');\nconst result2 = await axios.get('http://localhost:3001/getAllTodoOfaGroup?groupId=');\nassert.equal(result2.data[0].id,'null');",
              "err": {},
              "uuid": "2d8a18c7-ca33-443c-9fcc-f839e9acd741",
              "parentUUID": "90d7a6e8-dcb4-4b47-a8ce-5fa91f035f5a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fetch all todo of a group",
              "fullTitle": "test /getAllTodoOfaGroup fetch all todo of a group",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/getAllTodoOfaGroup', {params:{ userId:'eaghayi', groupId:'school'}});\n// const result = await axios.get('http://localhost:3001/getAllTodoOfaGroup?userId=eaghayi');\nassert.equal(result.data[0].id,'1');\nassert.equal(result.data[1].id,'2');\nassert.equal(result.data[0].description,'be sure to commit unit tests');\nassert.equal(result.data[1].description,'be sure to push unit tests');\nassert.equal(result.data[0].title,'commit code');\nassert.equal(result.data[1].title,'push code');\nassert.equal(result.data[0].dueDate,'02/25/2018');",
              "err": {},
              "uuid": "1b5e694b-f73a-4a67-8429-d692901afb17",
              "parentUUID": "90d7a6e8-dcb4-4b47-a8ce-5fa91f035f5a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it returns empty array if it can not find any thing",
              "fullTitle": "test /getAllTodoOfaGroup it returns empty array if it can not find any thing",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/getAllTodoOfaGroup', {params:{ userId:'eaghayi', groupId:'work'}});\nassert.equal(result.data,'');",
              "err": {},
              "uuid": "f6f8fe0b-5c70-4b6c-9256-5e038657f212",
              "parentUUID": "90d7a6e8-dcb4-4b47-a8ce-5fa91f035f5a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d8a18c7-ca33-443c-9fcc-f839e9acd741",
            "1b5e694b-f73a-4a67-8429-d692901afb17",
            "f6f8fe0b-5c70-4b6c-9256-5e038657f212"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "88581760-4d57-4665-8284-f62d45600885",
          "title": "test /markTodoAsArchived",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/alltodoTests.js",
          "file": "/tests/alltodoTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "illegal argument",
              "fullTitle": "test /markTodoAsArchived illegal argument",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/markTodoAsArchived?id=');\nassert.equal(result.data.id,'null');",
              "err": {},
              "uuid": "b6835330-1ebc-4a7e-b5b9-6a452f2d13ad",
              "parentUUID": "88581760-4d57-4665-8284-f62d45600885",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "could not find object with the id",
              "fullTitle": "test /markTodoAsArchived could not find object with the id",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/markTodoAsArchived?id=22');\nassert.equal(result.data, false);",
              "err": {},
              "uuid": "6007638f-eb2a-40bf-8dfd-f4b9dc9b3f6b",
              "parentUUID": "88581760-4d57-4665-8284-f62d45600885",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "update status of a todo",
              "fullTitle": "test /markTodoAsArchived update status of a todo",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/markTodoAsArchived', {params:{ id:234}});\nassert.equal(result.data, true);",
              "err": {
                "message": "AssertionError: false == true",
                "estack": "AssertionError [ERR_ASSERTION]: false == true\n    at Context.<anonymous> (tests/alltodoTests.js:431:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "2dd5a1ca-098e-442b-9f92-5ac899a6b0a9",
              "parentUUID": "88581760-4d57-4665-8284-f62d45600885",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b6835330-1ebc-4a7e-b5b9-6a452f2d13ad",
            "6007638f-eb2a-40bf-8dfd-f4b9dc9b3f6b"
          ],
          "failures": [
            "2dd5a1ca-098e-442b-9f92-5ac899a6b0a9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9eea06d3-7ce6-441c-8a91-788b56b91592",
          "title": "test //markTodoAsDone",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/alltodoTests.js",
          "file": "/tests/alltodoTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "illegal argument",
              "fullTitle": "test //markTodoAsDone illegal argument",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/markTodoAsDone?id=');\nassert.equal(result.data.id,'null');",
              "err": {},
              "uuid": "d12ede9d-3158-46de-92b2-99be85473c54",
              "parentUUID": "9eea06d3-7ce6-441c-8a91-788b56b91592",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "could not find object with the id",
              "fullTitle": "test //markTodoAsDone could not find object with the id",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/markTodoAsDone?id=22');\nassert.equal(result.data, false);",
              "err": {},
              "uuid": "42349fd7-d52f-4608-ba15-623827341cab",
              "parentUUID": "9eea06d3-7ce6-441c-8a91-788b56b91592",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "update priority of a todo",
              "fullTitle": "test //markTodoAsDone update priority of a todo",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/markTodoAsDone', {params:{ id:234}});\nassert.equal(result.data.id,'234');\nassert.equal(result.data.description,'be sure to commit unit tests');\nassert.equal(result.data.title,'commit code');\nassert.equal(result.data.dueDate,'02-25-2018');",
              "err": {
                "message": "AssertionError: undefined == '234'",
                "estack": "AssertionError [ERR_ASSERTION]: undefined == '234'\n    at Context.<anonymous> (tests/alltodoTests.js:465:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "ec77ba92-f432-41cd-b41e-6bba0d9c0d43",
              "parentUUID": "9eea06d3-7ce6-441c-8a91-788b56b91592",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d12ede9d-3158-46de-92b2-99be85473c54",
            "42349fd7-d52f-4608-ba15-623827341cab"
          ],
          "failures": [
            "ec77ba92-f432-41cd-b41e-6bba0d9c0d43"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "be730da6-7a2a-4e9a-872b-c95c7d50ffc7",
          "title": "test /remindOnDueDate",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/alltodoTests.js",
          "file": "/tests/alltodoTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "illegal argument",
              "fullTitle": "test /remindOnDueDate illegal argument",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/remindOnDueDate?userId=');\nassert.equal(result.data[0].id,'null');\nconst result2 = await axios.get('http://localhost:3001/remindOnDueDate?dueDate=');\nassert.equal(result2.data[0].id,'null');",
              "err": {},
              "uuid": "011f28c0-1cc5-430e-9c49-4a8948bb4759",
              "parentUUID": "be730da6-7a2a-4e9a-872b-c95c7d50ffc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fetch all todo of a specific duedate",
              "fullTitle": "test /remindOnDueDate fetch all todo of a specific duedate",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/remindOnDueDate', {params:{ userId:'eaghayi', dueDate:'02/25/2018'}});\nassert.equal(result.data[0].id,'2');\nassert.equal(result.data[0].dueDate,'02/25/2018');",
              "err": {
                "message": "AssertionError: 'null' == '2'",
                "estack": "AssertionError [ERR_ASSERTION]: 'null' == '2'\n    at Context.<anonymous> (tests/alltodoTests.js:504:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- null\n+ 2\n"
              },
              "uuid": "73f65627-c214-4ecb-866c-fbe4d2fd4986",
              "parentUUID": "be730da6-7a2a-4e9a-872b-c95c7d50ffc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it returns empty array if it can not find any thing",
              "fullTitle": "test /remindOnDueDate it returns empty array if it can not find any thing",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/remindOnDueDate', {params:{ userId:'eaghayi', dueDate:'06/25/2018'}});\nassert.equal(result.data,'');",
              "err": {
                "message": "AssertionError: [\n  {\n    address: 'null',\n    createdDate: 'null',\n    createdTime: 'null',\n    dataStoreId: 'null',\n    description: 'null',\n    dueDate: 'null',\n    groupId: 'null',\n    id: 'null',\n    priority: 'null',\n    repeat: 'null',\n    status: 'null',\n    title: 'null',\n    userId: 'null'\n  }\n] == ''",
                "estack": "AssertionError [ERR_ASSERTION]: [\n  {\n    address: 'null',\n    createdDate: 'null',\n    createdTime: 'null',\n    dataStoreId: 'null',\n    description: 'null',\n    dueDate: 'null',\n    groupId: 'null',\n    id: 'null',\n    priority: 'null',\n    repeat: 'null',\n    status: 'null',\n    title: 'null',\n    userId: 'null'\n  }\n] == ''\n    at Context.<anonymous> (tests/alltodoTests.js:513:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3c65aa89-a4f0-4814-801b-500c62c5f1d3",
              "parentUUID": "be730da6-7a2a-4e9a-872b-c95c7d50ffc7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "011f28c0-1cc5-430e-9c49-4a8948bb4759"
          ],
          "failures": [
            "73f65627-c214-4ecb-866c-fbe4d2fd4986",
            "3c65aa89-a4f0-4814-801b-500c62c5f1d3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7da7e779-522d-49de-9ae1-2dc8d3f300dd",
          "title": "test //updatePriorityOfaTodo",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/alltodoTests.js",
          "file": "/tests/alltodoTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "illegal argument",
              "fullTitle": "test //updatePriorityOfaTodo illegal argument",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/updatePriorityOfaTodo?id=');\nassert.equal(result.data.id,'null');\nconst result2 = await axios.get('http://localhost:3001/updatePriorityOfaTodo?priority=');\nassert.equal(result2.data.id,'null');\nconst result3 = await axios.get('http://localhost:3001/updatePriorityOfaTodo?priority=77');\nassert.equal(result3.data.id,'null');",
              "err": {},
              "uuid": "595fec5c-70da-4353-82aa-4e3d573a0030",
              "parentUUID": "7da7e779-522d-49de-9ae1-2dc8d3f300dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "could not find object with the id",
              "fullTitle": "test //updatePriorityOfaTodo could not find object with the id",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/updatePriorityOfaTodo?id=22&priority=3');\n assert.equal(result.data, false);",
              "err": {},
              "uuid": "1874b197-b796-455e-ae75-db2fa51def4a",
              "parentUUID": "7da7e779-522d-49de-9ae1-2dc8d3f300dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "update priority of a todo",
              "fullTitle": "test //updatePriorityOfaTodo update priority of a todo",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await axios.get('http://localhost:3001/updatePriorityOfaTodo', {params:{ id:234, priority:3}});\nassert.equal(result.data, true);\nconst result2 = await axios.get('http://localhost:3001/updatePriorityOfaTodo', {params:{ id:2342343423, priority:3}});\nassert.equal(result2.data, false);",
              "err": {},
              "uuid": "121a61be-58d6-47d2-a914-62f7c5a8eba4",
              "parentUUID": "7da7e779-522d-49de-9ae1-2dc8d3f300dd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "595fec5c-70da-4353-82aa-4e3d573a0030",
            "1874b197-b796-455e-ae75-db2fa51def4a",
            "121a61be-58d6-47d2-a914-62f7c5a8eba4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c3095f3e-a61a-4b75-b8f4-1fa3ead09f70",
          "title": "test /updateTodo",
          "fullFile": "/Users/ezhang/Documents/crowd-microservices-output/tests/alltodoTests.js",
          "file": "/tests/alltodoTests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "illegal argument",
              "fullTitle": "test /updateTodo illegal argument",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await\naxios.get('http://localhost:3001/updateTodo', {params: {id: ''}});\nassert.equal(result.data.id, 'null');\nconst result2 = await\naxios.get('http://localhost:3001/updateTodo', {params: {id: '', title: ''}});\nassert.equal(result2.data.title, 'null');\nconst result3 = await\naxios.get('http://localhost:3001/updateTodo', {params: {id: '', title: '', userId: ''}});\nassert.equal(result3.data.userId, 'null');",
              "err": {},
              "uuid": "8cfaa101-a3b5-4366-8b65-fb5c5cfa251b",
              "parentUUID": "c3095f3e-a61a-4b75-b8f4-1fa3ead09f70",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "update todo",
              "fullTitle": "test /updateTodo update todo",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const result = await  axios.get('http://localhost:3001/updateTodo',\n    {\n        params: {\n            id: '2',\n            title: 'testAddTodo',\n            userId: 'eaghayi',\n            dueDate:'09-23-2018',\n            status: 2,\n            groupId: 'school',\n            createdTime: '12:39',\n            createdDate: '06-13-2018',\n            priority: 1,\n            address: ' ',\n            repeat: ' '\n        }\n    });\nassert.equal(result.data.id, 2);",
              "err": {
                "message": "AssertionError: 'null' == 2",
                "estack": "AssertionError [ERR_ASSERTION]: 'null' == 2\n    at Context.<anonymous> (tests/alltodoTests.js:596:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "f62f30bb-af3e-471b-8c8d-6adeed33f7e6",
              "parentUUID": "c3095f3e-a61a-4b75-b8f4-1fa3ead09f70",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check checkDateFormat helper method ",
              "fullTitle": "test /updateTodo check checkDateFormat helper method ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = await  axios.get('http://localhost:3001/updateTodo',\n    {\n        params: {\n            id: '2',\n            title: 'testAddTodo',\n            userId: 'eaghayi',\n            dueDate:'23-2018',\n            status: 2,\n            groupId: 'school',\n            createdTime: '12:39',\n            createdDate: '06-13-2018',\n            priority: 1,\n            address: ' ',\n            repeat: ' '\n        }\n    });\nassert.equal(result.data.id, 'null');",
              "err": {},
              "uuid": "ff8d5ad3-af34-418b-81f9-7adfeae9c1ff",
              "parentUUID": "c3095f3e-a61a-4b75-b8f4-1fa3ead09f70",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8cfaa101-a3b5-4366-8b65-fb5c5cfa251b",
            "ff8d5ad3-af34-418b-81f9-7adfeae9c1ff"
          ],
          "failures": [
            "f62f30bb-af3e-471b-8c8d-6adeed33f7e6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}